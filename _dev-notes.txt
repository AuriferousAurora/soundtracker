This is going to serve as way for me to write about what I am currently doing  when I complete a coding session. 
In theory, I can return to this file and read about what my current thought process as I wrap up and thus can ensure I don't forget what my current plans are. 
Also, maybe it will be easier to get back into my workflow without having to redecipher all my code.

I built this app using the starter code located here: https://github.com/jmperez/passport-spotify/tree/master/examples/login
This is the API reference: https://developer.spotify.com/documentation/web-api/reference/
I should probably read through these guides at some point: https://developer.spotify.com/documentation/general/guides/

:: 2020.09.15::

This is the end of my first session of coding. 


I still don't fully understand the login process and I only partially understand the templating engine (nunjucks), but it's similar enough to the only other one I'm familiar with (whatever engine Django for Python uses). 

I may decide to redesing the frontend with React or something else, but for now Node.JS for the backend and basic HTML/CSS/JS and Nunjucks should serve well.

In 'app.js', on line 45, I'm implementing a pretty basic request using node-fetch and logging the response object to the console. My plan is to have reviewed Net Ninja's tutorial on asynchronous JavaScript and maybe play around with some other async code so I can return to this and have a few more clues about how I want to proceed. Right now I'm guessing that I'll want to do some basic error-handling, change the URL to grab my playlists instead of my profile info, grab some info out of whatever I get back, and then shove it in some HTML using the Nunjucks templating system.

Ideally, I'll be able to have a deeper understanding of what I'm doing as I go.

:: 2020.09.26 ::

So, I have some questions:

What does the 'done' function do inside the passport.js code?

Do I have access to the 'accessToken' variable inside of the home route? If not, how do I pass that to route? Is it bad if I assign it to a global variable (probably).

:: 2020.09.27 ::

Still don't know what the done function does.

Currently, I'm assigning the accessToken that is returned during the passport authentication to a global variable and utilizing that in the home route to grab playlists. I still don't know enough about asnychronous JavasScript and the Express framework, so I'll
likely work on the CSS and finish the Node JWT tutorial before I return to this.

:: 2020.10.05 ::

Learned a lot today. I can add set the passReqToCallback property on the SpotifyStrategy to 'true' and have access to the request object in my callback function. That allows me to store the accessToken in the req.session object and use it elsewhere in the application.

I will likely want to write some code that handle what happens if the accessToken expries while the user is doing something.

... 

I have a successful fetch request applied to each button in my HTML collection of playlist items. Clicking the view button send a successful get request to the proper route but nothing else is happening. I suspect my ignorance of Express is the culprit.

...

Turns out, fetch in client-side JS returns a response to the script. To navigate to a new URL path, I can just use window.location and set a new path. I don't know if this is best practice, but it's working for now.

I also can likely remove the conditional rendering the Nunjucks tempalte to check for a user on each template when I rewrite the app routing to have a separate home/login route and playlists route. Kind of a waste since I'm already authenticating server-side.

:: 2020.10.13 ::

Current issue is that my layout template includes a link tag referencing the CSS stylesheet properly in the main pages, but when I change the URL the link no longer works. I either need to figure out how to solve this in Nunjucks or some other way.

:: 2020.10.24 ::

I was in the middle of creating a track detail view. I'll need to replicate something along the lines of what I did in the playlist detail route, sending the data to the context and creating links to said view in the playlist detail page the same way I did in the playlists view.

:: 2020.10.26 ::

Today I included conneciton code for a PostgreSQL database and wrote a working INSERT query for a playlist table. I'm getting an 'malformed array literal' error during the insertion that I have yet to debug but it looks like the majority or all of the being inserted into the database.

I realize toward the end of this programming session that I'm basically writing custom model code and it might be easier to either break out that code (from the playlistsRoutes file) into a separate models folder and use classes. I could stick the array formatting function as a method on that classs-- something to think about. It may not be worth it.

:: 2020.10.29 ::

I'm up super late because I was trying to figure out why the JavaScipt I wrote in the layout.html file is not updating the UI correctly. The DomTokenList.replace function seems to be correctly updating the HTML node, but it isn't painting the CSS correctly.

:: 2020.11.06 ::

I figured out the problem I was having last time. I was declaring a variable at the top of my script that was being reinstantiated every time the page changed location, so my code would execute and then only display for a fraction of a second before being rewritten. The solution was to save the variable in sessionStorage.

:: 2021.01.13 ::

I think I have some idea as to how I want to organize the routes. Refer to the playlists route to see how I've written that.
I'll also need to write some code in the model to handle conflicts on database insertion.

:: 2021.01.14 ::

I think long-term I will want to strip out all of my fetch code from the route and organize it as middleware. It doesn't make sense to have code that fetches from the database
for every route, just the ones that are accessible from the home screen: clicking the playlists tab will get all of the data I need to view tracks, so I'll just update the database then.
For now, I'm going to leave things as is and figure out what I want to do later.

:: 2021.07.28 ::

Today I learned that you can set the server and client encoding for a PostgreSQL database via the command 'SET server_encoding to 'utf8'' or 'SET client_encoding to 'WIN1252''. I don't know what will happen if you try to change the server encoding (my thought was it would potentially fuck up the data) but changing the client encoding solved a problem I was
having in my terminal where querying certain tables was throwing an error that 'character with byte sequence 0xe5 0xbd 0xb1 in UTF8 encoding has no equivalent in WIN1252', so I just changed the client encoding. Not sure if it carries over between sessions.
